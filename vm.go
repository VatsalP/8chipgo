package main

import (
	"fmt"
	"io/ioutil"

	"github.com/gammazero/deque"
)

// chipVM holds all the register, memory, etc.
type chipVM struct {
	v            [0xf]uint8
	i            uint16
	sound, delay uint8
	stack        deque.Deque
	memory       [4096]uint8
	display      [32][64]int
	pc           int
}

func newChipVM(file string) *chipVM {
	vm := new(chipVM)
	vm.sound = 0
	vm.delay = 0
	vm.setFont()

	rom, err := ioutil.ReadFile(file)
	if err != nil {
		panic(err)
	}
	for addr := 0x200; addr < len(rom)+0x200; addr++ {
		vm.memory[addr] = rom[addr-0x200]
		fmt.Printf("addr:\t%x\topcode:\t%x\n", addr, vm.memory[addr])
	}
	return vm
}

func (vm *chipVM) setFont() {
	fontlist := [][]int{
		{0xF0, 0x90, 0x90, 0x90, 0xF0}, // 0
		{0x20, 0x60, 0x20, 0x20, 0x70}, // 1
		{0xF0, 0x10, 0xF0, 0x80, 0xF0}, // 2
		{0xF0, 0x10, 0xF0, 0x10, 0xF0}, // 3
		{0x90, 0x90, 0xF0, 0x10, 0x10}, // 4
		{0xF0, 0x80, 0xF0, 0x10, 0xF0}, // 5
		{0xF0, 0x80, 0xF0, 0x90, 0xF0}, // 6
		{0xF0, 0x10, 0x20, 0x40, 0x40}, // 7
		{0xF0, 0x90, 0xF0, 0x90, 0xF0}, // 8
		{0xF0, 0x90, 0xF0, 0x10, 0xF0}, // 9
		{0xF0, 0x90, 0xF0, 0x90, 0x90}, // a
		{0xE0, 0x90, 0xE0, 0x90, 0xE0}, // b
		{0xF0, 0x80, 0x80, 0x80, 0xF0}, // c
		{0xE0, 0x90, 0x90, 0x90, 0xE0}, // d
		{0xF0, 0x80, 0xF0, 0x80, 0xF0}, // e
		{0xF0, 0x80, 0xF0, 0x80, 0x80}, // f
	}
	i := 0
	for _, sprite := range fontlist {
		for _, v := range sprite {
			vm.memory[i] = uint8(v)
			i++
		}
	}
}

func (vm *chipVM) playTone() {
	
}